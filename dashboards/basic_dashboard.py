# -*- coding: utf-8 -*-
"""basic_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXHftIIrJOSw_egLt8J1yRsE86a4AN0R
"""

# pip install streamlit

# !streamlit run dashboards/basic_dashboard.py

print(model.feature_names_in_)

import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt

# Load data and model
df = pd.read_csv("bike_rental_features.csv")
model = joblib.load("best_poly_model.pkl")

st.title("ðŸš² Florida Bike Rentals Forecast Dashboard")

# Sidebar Input Controls
st.sidebar.header("Input Values")
temp = st.sidebar.slider("Temperature (C)", -10.0, 40.0, 22.0)
humidity = st.sidebar.slider("Humidity (%)", 0, 100, 60)
wind_speed = st.sidebar.slider("Wind Speed (m/s)", 0.0, 10.0, 3.5)
visibility = st.sidebar.slider("Visibility (10m)", 0, 2000, 1000)
dew_point = st.sidebar.slider("Dew Point Temp (C)", -10.0, 30.0, 10.0)
solar_rad = st.sidebar.slider("Solar Radiation (MJ/mÂ²)", 0.0, 5.0, 1.5)
rainfall = st.sidebar.slider("Rainfall (mm)", 0.0, 50.0, 2.0)
snowfall = st.sidebar.slider("Snowfall (cm)", 0.0, 10.0, 0.0)

weekday = st.sidebar.slider("Weekday (0=Monday ... 6=Sunday)", 0, 6, 2)
is_weekend = st.sidebar.selectbox("Is Weekend?", ["Yes", "No"])
month = st.sidebar.slider("Month", 1, 12, 8)

season = st.sidebar.selectbox("Season", ["Spring", "Summer", "Winter", "Autumn"])
holiday = st.sidebar.selectbox("Holiday", ["Holiday", "No Holiday"])
functioning_day = st.sidebar.selectbox("Functioning Day", ["Yes", "No"])

pca_1 = st.sidebar.slider("PCA_1", -5.0, 5.0, 0.0)
pca_2 = st.sidebar.slider("PCA_2", -5.0, 5.0, 0.0)

# Map categorical values to expected format
input_df = pd.DataFrame({
    "Temperature(C)": [temp],
    "Humidity(%)": [humidity],
    "Wind speed (m/s)": [wind_speed],
    "Visibility (10m)": [visibility],
    "Dew point temperature(C)": [dew_point],
    "Solar Radiation (MJ/m2)": [solar_rad],
    "Rainfall(mm)": [rainfall],
    "Snowfall (cm)": [snowfall],
    "Weekday": [weekday],
    "IsWeekend": [1 if is_weekend == "Yes" else 0],
    "Month": [month],
    "Seasons_Spring": [1 if season == "Spring" else 0],
    "Seasons_Summer": [1 if season == "Summer" else 0],
    "Seasons_Winter": [1 if season == "Winter" else 0],
    "Holiday_No Holiday": [1 if holiday == "No Holiday" else 0],
    "Functioning Day_Yes": [1 if functioning_day == "Yes" else 0],
    "PCA_1": [pca_1],
    "PCA_2": [pca_2]
})

# Prediction Output
prediction = model.predict(input_df)[0]
st.metric(label="ðŸ“Š Predicted Rentals", value=int(prediction))

# Historical Overview
st.subheader("Historic Rental Patterns")
fig, ax = plt.subplots()
ax.plot(df["Temperature(C)"], df["Rented Bike Count"], '.', alpha=0.3)
ax.set_xlabel("Temperature (C)")
ax.set_ylabel("Rented Bike Count")
st.pyplot(fig)